class Solution {
public:
    
     int countPaths(int i,int j,int n,int m,vector<vector<int>> &dp,vector<vector<int>>&obstacleGrid)
    {
        if(i==(n-1)&&j==(m-1)&&obstacleGrid[i][j]!=1) return 1;
        if(i>=n||j>=m||obstacleGrid[i][j]==1) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
     else return dp[i][j]=countPaths(i+1,j,n,m,dp,obstacleGrid)+countPaths(i,j+1,n,m,dp,obstacleGrid);
        
    }
    
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int n=obstacleGrid.size();
        int m=obstacleGrid[0].size();
        vector<vector<int>>dp(n+1,vector<int>(m+1,-1));
        int num=countPaths(0,0,n,m,dp,obstacleGrid);
        if(n==1&&m==1)return num;
        return dp[0][0]<0?0:dp[0][0];
    }
};
